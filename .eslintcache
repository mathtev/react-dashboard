[{"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Layout\\Layout.js":"1","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Sidebar\\SidebarLinks\\SidebarLinks.js":"2","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Sidebar\\Sidebar.js":"3","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\notifications\\Notifications.js":"4","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\about\\About.js":"5","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\icon\\Icon.js":"6","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\App.js":"7","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\index.js":"8","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\icon\\icons\\index.js":"9","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\header\\header.js":"10","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\header\\Header.js":"11","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\dashboard\\Dashboard.js":"12","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Widget\\Widget.js":"13","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\tables\\Tables.js":"14","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\reportWebVitals.js":"15","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\charts\\MyLineChart.js":"16","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Header\\Header.js":"17","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\charts\\MyBarChart.js":"18"},{"size":1253,"mtime":1611530260176,"results":"19","hashOfConfig":"20"},{"size":2149,"mtime":1609424509454,"results":"21","hashOfConfig":"20"},{"size":1664,"mtime":1609680744599,"results":"22","hashOfConfig":"20"},{"size":412,"mtime":1609427399622,"results":"23","hashOfConfig":"20"},{"size":372,"mtime":1609427330531,"results":"24","hashOfConfig":"20"},{"size":292,"mtime":1609276497745,"results":"25","hashOfConfig":"20"},{"size":575,"mtime":1609502640893,"results":"26","hashOfConfig":"20"},{"size":489,"mtime":1608815640246,"results":"27","hashOfConfig":"20"},{"size":320,"mtime":1609681070616,"results":"28","hashOfConfig":"20"},{"size":1961,"mtime":1609503151618,"results":"29","hashOfConfig":"20"},{"size":2622,"mtime":1613004818332,"results":"30","hashOfConfig":"20"},{"size":3506,"mtime":1613171015662,"results":"31","hashOfConfig":"20"},{"size":417,"mtime":1612568459404,"results":"32","hashOfConfig":"20"},{"size":9842,"mtime":1613049924143,"results":"33","hashOfConfig":"20"},{"size":362,"mtime":1607896629704,"results":"34","hashOfConfig":"20"},{"size":773,"mtime":1613171299610,"results":"35","hashOfConfig":"20"},{"size":2574,"mtime":1613168725073,"results":"36","hashOfConfig":"20"},{"size":865,"mtime":1613170322279,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"shat26",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Layout\\Layout.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Sidebar\\SidebarLinks\\SidebarLinks.js",["77"],"import React, { useState } from \"react\";\r\nimport cx from 'classnames';\r\nimport { Collapse } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport styled from './SidebarLinks.module.scss'\r\nimport Icon from '../../icon/Icon';\r\n\r\nconst SidebarLinks = (props) => {\r\n\r\n  const [collapseOpen, setCollapseOpen] = useState(false);\r\n\r\n  const { clsName, header, headerLink, glyph, collapseLinks } = props;\r\n  if (!collapseLinks) {\r\n    return (\r\n      <li className={styled.sidebarItem}>\r\n        <NavLink\r\n          to={headerLink}\r\n          activeClassName={styled.activeLink}\r\n          exact\r\n        >\r\n          {glyph && <Icon glyph={glyph} />}\r\n          {header}\r\n        </NavLink>\r\n      </li>\r\n    );\r\n  }\r\n  return (\r\n    <li className={styled.sidebarItem}>\r\n      <button\r\n        className={styled.collapseButton}\r\n        onClick={() => setCollapseOpen(!collapseOpen)}\r\n      >\r\n        {glyph && <Icon glyph={glyph} />}\r\n        {header}\r\n        <span className={cx(styled.arrow, { [styled.arrowActive]: collapseOpen })} >\r\n          <Icon glyph=\"leftarrow\" />\r\n        </span>\r\n      </button>\r\n      <Collapse className={styled.panel} isOpen={collapseOpen}>\r\n        <ul>\r\n          {collapseLinks &&\r\n            collapseLinks.map(childLink => (\r\n              <li key={childLink.name}>\r\n                <NavLink\r\n                  to={childLink.link}\r\n                  className={styled.collapseLinks}\r\n                  activeClassName={styled.activeChildLink}\r\n                  exact\r\n                  onClick={() => setCollapseOpen(true)}\r\n                >\r\n                  {childLink.name}\r\n                </NavLink>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </Collapse>\r\n    </li>\r\n  )\r\n}\r\n\r\nSidebarLinks.propTypes = {\r\n  clsName: PropTypes.string,\r\n  header: PropTypes.node.isRequired,\r\n  headerLink: PropTypes.string,\r\n  glyph: PropTypes.string,\r\n  collapseLinks: PropTypes.array,\r\n};\r\n\r\nSidebarLinks.defaultProps = {\r\n  clsName: '',\r\n  header: null,\r\n  headerLink: null,\r\n  glyph: null,\r\n  collapseLinks: null,\r\n};\r\n\r\nexport default SidebarLinks;",["78","79"],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\notifications\\Notifications.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\about\\About.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\icon\\Icon.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\App.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\index.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\icon\\icons\\index.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\header\\header.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\header\\Header.js",["80"],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\dashboard\\Dashboard.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Widget\\Widget.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\pages\\tables\\Tables.js",["81","82"],"import React, { useEffect, useState } from 'react';\r\nimport { Row, Col, Table, Input, Label, Progress } from 'reactstrap';\r\nimport cx from 'classnames';\r\n\r\nimport Widget from '../../components/Widget/Widget';\r\nimport styled from './Tables.module.scss';\r\n\r\n\r\nconst useFetch = () => {\r\n  const [users, setUsers] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const _getUser = async () => {\r\n      const result = await fetch('https://api.github.com/users');\r\n      const data = await result.json();\r\n      setUsers(data);\r\n    }\r\n    _getUser();\r\n  }, []);\r\n\r\n  return { users };\r\n}\r\n\r\nconst Tables = () => {\r\n  const [mainTable, setMainTable] = useState({\r\n    tableRows: [\r\n      {\r\n        id: 1,\r\n        picture: require('../../images/tables/bird.jpg').default,\r\n        description: 'Blue Bird',\r\n        date: 'November 21 2021',\r\n        info: {\r\n          size: '1,23 MB',\r\n          type: 'jpg'\r\n        },\r\n        progress: '40'\r\n      },\r\n      {\r\n        id: 2,\r\n        picture: require('../../images/tables/city.jpg').default,\r\n        description: 'Chicago',\r\n        date: 'March 1 2021',\r\n        info: {\r\n          size: '1,23 MB',\r\n          type: 'png'\r\n        },\r\n        progress: '20'\r\n      },\r\n      {\r\n        id: 3,\r\n        picture: require('../../images/tables/flower.jpg').default,\r\n        description: 'Red Flower',\r\n        date: 'November 21 2021',\r\n        info: {\r\n          size: '2,31 MB',\r\n          type: 'gif'\r\n        },\r\n        progress: '40'\r\n      },\r\n      {\r\n        id: 4,\r\n        picture: require('../../images/tables/moon.jpg').default,\r\n        description: 'Cosmos',\r\n        date: 'January 2 2021',\r\n        info: {\r\n          size: '1,13 MB',\r\n          type: 'jpg'\r\n        },\r\n        progress: '80'\r\n      },\r\n      {\r\n        id: 5,\r\n        picture: require('../../images/tables/tree.jpg').default,\r\n        description: 'Spring',\r\n        date: 'September 12 2020',\r\n        info: {\r\n          size: '2,23 MB',\r\n          type: 'png'\r\n        },\r\n        progress: '10'\r\n      },\r\n    ],\r\n  });\r\n  const [checkboxState, setCheckboxState] = useState({\r\n    checkboxes1: [false, true, false, false, false],\r\n    checkboxes2: [false, false, false, false, true],\r\n  });\r\n\r\n  const { users } = useFetch();\r\n\r\n  const changeCheck = (checkboxes, idx) => {\r\n    let newCheckboxes = checkboxState[checkboxes];\r\n    newCheckboxes[idx] = !newCheckboxes[idx];\r\n    setCheckboxState((prevState) => ({ ...prevState, [checkboxes]: newCheckboxes }));\r\n  }\r\n\r\n  const checkAll = (checkboxes) => {\r\n    let newCheckboxes = checkboxState[checkboxes];\r\n    newCheckboxes = newCheckboxes.fill(!newCheckboxes[0]);\r\n    setCheckboxState((prevState) => ({ ...prevState, [checkboxes]: newCheckboxes }));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col lg={12}>\r\n          <Widget>\r\n            <h3 className=\"pb-3\">Main Table</h3>\r\n            <div style={{ overflowX: 'auto' }}>\r\n              <Table className={cx(styled.mainTable)}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>PICTURE</th>\r\n                    <th>DESCRIPTION</th>\r\n                    <th>DATE</th>\r\n                    <th>INFO</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {mainTable.tableRows.map(tableRow => (\r\n                    <tr>\r\n                      <td>\r\n                        {tableRow.id}\r\n                      </td>\r\n                      <td>\r\n                        <img src={tableRow.picture} />\r\n                      </td>\r\n                      <td>\r\n                        {tableRow.description}\r\n                      </td>\r\n                      <td>\r\n                        {tableRow.date}\r\n                      </td>\r\n                      <td>\r\n                        <p className=\"mb-0\">\r\n                          <small>\r\n                            <b>Size:&nbsp;</b>\r\n                            {tableRow.info.size}\r\n                          </small>\r\n                        </p>\r\n                        <p className=\"mb-0\">\r\n                          <small>\r\n                            <b>Type:&nbsp;</b>\r\n                            {tableRow.info.type}\r\n                          </small>\r\n                        </p>\r\n                      </td>\r\n                      <td style={{ width: '60px' }}>\r\n                        <Progress\r\n                          color=\"success\" value={tableRow.progress}\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          </Widget>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col lg={6}>\r\n          <Widget footer=\"fetched from https://api.github.com/users\">\r\n            <h3 className=\"pb-3\">Stripped Table</h3>\r\n            <Table className={cx(styled.secondaryTable, \"table-striped\")}>\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"abc-checkbox\">\r\n                      <Input\r\n                        id=\"checkbox1-0\" type=\"checkbox\" checked={checkboxState.checkboxes1[0]}\r\n                        onChange={() => checkAll('checkboxes1')}\r\n                      />\r\n                      <Label for=\"checkbox1-0\" />\r\n                    </div>\r\n                  </th>\r\n                  <th>Id</th>\r\n                  <th>Username</th>\r\n                  <th>Avatar</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {users &&\r\n                  users.slice(0, 4).map((user, idx) => (\r\n                    <tr key={user.id}>\r\n                      <td>\r\n                        <div className=\"abc-checkbox\">\r\n                          <Input\r\n                            id={\"checkbox1-\" + idx + 1} type=\"checkbox\" checked={checkboxState.checkboxes1[idx + 1]}\r\n                            onChange={() => changeCheck('checkboxes1', idx + 1)}\r\n                          />\r\n                          <Label for={\"checkbox1-\" + idx + 1} />\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        {user.id}\r\n                      </td>\r\n                      <td>\r\n                        {user.login}\r\n                      </td>\r\n                      <td>\r\n                        <img src={user.avatar_url} alt=\"user img\"></img>\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                }\r\n              </tbody>\r\n            </Table>\r\n          </Widget>\r\n        </Col>\r\n        <Col lg={6}>\r\n          <Widget footer=\"fetched from https://api.github.com/users\">\r\n            <h3 className=\"pb-3\">Hover Table</h3>\r\n            <Table className={cx(styled.secondaryTable, \"table-hover\")}>\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <div className=\"abc-checkbox\">\r\n                      <Input\r\n                        id=\"checkbox2-0\" type=\"checkbox\" checked={checkboxState.checkboxes2[0]}\r\n                        onChange={() => checkAll('checkboxes2')}\r\n                      />\r\n                      <Label for=\"checkbox2-0\" />\r\n                    </div>\r\n                  </th>\r\n                  <th>Id</th>\r\n                  <th>Username</th>\r\n                  <th>Avatar</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {users &&\r\n                  users.slice(0, 4).map((user, idx) => (\r\n                    <tr key={user.id}>\r\n                      <td>\r\n                        <div className=\"abc-checkbox\">\r\n                          <Input\r\n                            id={\"checkbox2-\" + idx + 1} type=\"checkbox\" checked={checkboxState.checkboxes2[idx + 1]}\r\n                            onChange={() => changeCheck('checkboxes2', idx + 1)}\r\n                          />\r\n                          <Label for={\"checkbox2-\" + idx + 1} />\r\n                        </div>\r\n                      </td>\r\n                      <td>\r\n                        {user.id}\r\n                      </td>\r\n                      <td>\r\n                        {user.login}\r\n                      </td>\r\n                      <td>\r\n                        <img src={user.avatar_url} alt=\"user img\"></img>\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                }\r\n              </tbody>\r\n            </Table>\r\n          </Widget>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col lg={6}>\r\n          <Widget footer=\"fetched from https://api.github.com/users\">\r\n            <h3 className=\"pb-3\">Bordered Table</h3>\r\n            <Table className={cx(styled.secondaryTable, \"table-bordered\")}>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Username</th>\r\n                  <th>Avatar</th>\r\n                  <th>Url</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {users &&\r\n                  users.slice(0, 4).map((user, idx) => (\r\n                    <tr key={user.id}>\r\n                      <td>\r\n                        {idx + 1}\r\n                      </td>\r\n                      <td>\r\n                        {user.login}\r\n                      </td>\r\n                      <td>\r\n                        <img src={user.avatar_url} alt=\"user img\"></img>\r\n                      </td>\r\n                      <td>\r\n                        <a href={user.url}>{user.url.replace(/(^\\w+:|^)\\/\\//, '')}</a>\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                }\r\n              </tbody>\r\n            </Table>\r\n          </Widget>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tables\r\n","C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\reportWebVitals.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\charts\\MyLineChart.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\Header\\Header.js",[],"C:\\Users\\matht\\OneDrive\\Pulpit\\my dashboard\\react-dashboard-v1\\src\\components\\charts\\MyBarChart.js",[],{"ruleId":"83","severity":1,"message":"84","line":14,"column":11,"nodeType":"85","messageId":"86","endLine":14,"endColumn":18},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"83","severity":1,"message":"91","line":21,"column":10,"nodeType":"85","messageId":"86","endLine":21,"endColumn":22},{"ruleId":"83","severity":1,"message":"92","line":25,"column":21,"nodeType":"85","messageId":"86","endLine":25,"endColumn":33},{"ruleId":"93","severity":1,"message":"94","line":127,"column":25,"nodeType":"95","endLine":127,"endColumn":55},"no-unused-vars","'clsName' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["96"],"no-negated-in-lhs",["97"],"'IoMdSettings' is defined but never used.","'setMainTable' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]